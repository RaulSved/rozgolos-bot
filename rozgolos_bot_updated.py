import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7859058780:AAHvBh7w7iNvc8KLE9Eq0RMfmjdwKYuAFOA"

# –°—Ç–∞–Ω–∏
ASK_NAME, ASK_EMAIL, ASK_PHONE, ASK_OS = range(4)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    print(f"üëâ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ /start: {user.id}")

    await update.message.reply_photo(photo=open("/Users/ruslanshevchenko/Desktop/rozgolos_start.jpg", "rb"))

    await update.message.reply_text(
        "–í–∞—Å –≤—ñ—Ç–∞—î –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–æ—Ç —é—Ä–∏–¥–∏—á–Ω–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É ROZGOLOS üá∫üá¶\n\n"
        "–ú–∏ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –ø—Ä–∏ –≤—Ä—É—á–µ–Ω–Ω—è—Ö –ø–æ–≤—ñ—Å—Ç–æ–∫, –∑—É–ø–∏–Ω–∫–∞—Ö –Ω–∞ –±–ª–æ–∫–ø–æ—Å—Ç–∞—Ö —ñ –≤ —Å–∏—Ç—É–∞—Ü—ñ—è—Ö, –∫–æ–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–∏ —Ç–µ–±–µ.\n\n"
        "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –¥–æ –∑–∞—Ö–∏—Å—Ç—É –º–æ–∂–ª–∏–≤–∏–π —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∫–æ—Ä–æ—Ç–∫–æ—ó –∞–Ω–∫–µ—Ç–∏.\n‚ùóÔ∏è–ù–µ–¥—ñ–π—Å–Ω—ñ –∑–∞—è–≤–∫–∏ –≤—ñ–¥—Ö–∏–ª—è—é—Ç—å—Å—è.\n\n"
        "üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –Ü–ú‚Äô–Ø –¢–ê –ü–†–Ü–ó–í–ò–©–ï (–≤–µ–ª–∏–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏):"
    )
    return ASK_NAME

# –ü–Ü–ë
async def ask_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text.strip()
    await update.message.reply_text("**üìß –í–≤–µ–¥—ñ—Ç—å EMAIL:**", parse_mode="Markdown")
    return ASK_EMAIL

# Email
async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['email'] = update.message.text.strip()
    await update.message.reply_text("**üìû –í–≤–µ–¥—ñ—Ç—å –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–£ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380...**", parse_mode="Markdown")
    return ASK_PHONE

# –¢–µ–ª–µ—Ñ–æ–Ω
async def ask_os(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['phone'] = update.message.text.strip()
    keyboard = [["iOS"], ["Android"]]
    await update.message.reply_text(
        "**üì≤ –û–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω—É —Å–∏—Å—Ç–µ–º—É –≤–∞—à–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:**",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
        parse_mode="Markdown"
    )
    return ASK_OS

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    os_choice = update.message.text.strip()
    context.user_data['os'] = os_choice

    data = context.user_data
    user_info = (
        f"üÜï –ù–û–í–ê –ó–ê–Ø–í–ö–ê\n\n"
        f"üë§ –ü–Ü–ë: **{data['name'].upper()}**\n"
        f"üìß EMAIL: **{data['email'].upper()}**\n"
        f"üìû –¢–ï–õ–ï–§–û–ù: **{data['phone'].upper()}**\n"
        f"üì≤ –û–°: **{data['os'].upper()}**"
    )

    await context.bot.send_message(chat_id=7666787687, text=user_info, parse_mode="Markdown")

    if os_choice == "iOS":
        link = "https://apps.apple.com/app/id6739999117"
    else:
        link = "https://play.google.com/store/apps/details?id=com.rozgolos"

    keyboard = [[InlineKeyboardButton("üîí –í–°–¢–ê–ù–û–í–ò–¢–ò ROZGOLOS", url=link)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚úÖ –î—è–∫—É—î–º–æ! –ê–Ω–∫–µ—Ç—É –ø—Ä–∏–π–Ω—è—Ç–æ.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —Ç–∞ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∑–∞—Ö–∏—Å—Ç üëá",
        reply_markup=reply_markup
    )

    return ConversationHandler.END
# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error(msg="‚ùå –ü–û–ú–ò–õ–ö–ê:", exc_info=context.error)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_email)],
            ASK_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_os)],
            ASK_OS: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish)]
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î –Ω–∞ /start...")
    application.run_polling()
